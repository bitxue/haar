# Haar

nD [Haar] transform and it's inverse.

## Introduction

I wanted to play around with wavelet based blending and multi-scale
representations in the data I work with, which is often a 3d-scalar field.

I also wrote a [z-order] transform thinking it would be fun to implement the
haar transform in a cache oblivious way.  The z-ordering gives the data a
hierarchical structure in memory that helps coallesce memory access in a 
recursive algorithm, like the one commonly used to implement wavelet 
transforms.  I haven't gotten around to actually use the z ordering.

There's been a gap of time between when I wrote the code and wrote this README.
I think the algorithms are possibly in place (this may be untested?), with a
little bit of extra memory used for book-keeping.  I believe the dimensions of
the input must be powers of two, but the dimensions don't all need to be the
same.  You can also pass in, or output to, a subvolume of an nd-array.

The next thing I want to do is do a GPU implementation, maybe do some other
wavelets, and then actually use the code for something (good, not evil).

[z-order]: http://en.wikipedia.org/wiki/Z-order_(curve)
[Haar]: http://en.wikipedia.org/wiki/Haar_wavelet
